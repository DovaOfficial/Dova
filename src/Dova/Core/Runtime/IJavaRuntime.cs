namespace Dova.Core.Runtime;

/// <summary>
/// For more information please check:
/// https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html
/// </summary>
/// <author>
/// https://github.com/Sejoslaw/Dova
/// </author>
public unsafe interface IJavaRuntime
{
    /// <returns>Returns the version of the native method interface.</returns>
    int GetVersion();
    IntPtr DefineClass(string name, IntPtr loader, byte* buffer, int bufferLength);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="className"></param>
    /// <returns></returns>
    IntPtr FindClass(string className);
    IntPtr FromReflectedMethod(IntPtr obj);
    IntPtr FromReflectedField(IntPtr obj);
    IntPtr ToReflectedMethod(IntPtr jClass, IntPtr jMethodId, bool isStatic);
    IntPtr GetSuperclass(IntPtr jClass);
    bool IsAssignableFrom(IntPtr jclass1, IntPtr jclass2);
    IntPtr ToReflectedField(IntPtr jclass, IntPtr jfieldid, bool jboolean);
    int Throw(IntPtr jthrowable);
    int ThrowNew(IntPtr jclass, string message);
    IntPtr ExceptionOccurred();
    void ExceptionDescribe();
    void ExceptionClear();
    void FatalError(string message);
    int PushLocalFrame(int capacity);
    IntPtr PopLocalFrame(IntPtr jobject);
    IntPtr NewGlobalRef(IntPtr jobject);
    void DeleteGlobalRef(IntPtr jobject);
    void DeleteLocalRef(IntPtr jobject);
    bool IsSameObject(IntPtr jobject1, IntPtr jobject2);
    IntPtr NewLocalRef(IntPtr jobject);
    int EnsureLocalCapacity(int capacity);
    IntPtr AllocObject(IntPtr jclass);
    IntPtr NewObject(IntPtr jclass, IntPtr jmethodid);
    IntPtr NewObjectA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    IntPtr GetObjectClass(IntPtr jobject);
    bool IsInstanceOf(IntPtr jobject, IntPtr jclass);
    IntPtr GetMethodId(IntPtr jclass, string name, string signature);
    IntPtr CallObjectMethod(IntPtr jobject, IntPtr jmethodid);
    IntPtr CallObjectMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    bool CallBooleanMethod(IntPtr jobject, IntPtr jmethodid);
    bool CallBooleanMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    byte CallByteMethod(IntPtr jobject, IntPtr jmethodid);
    byte CallByteMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    char CallCharMethod(IntPtr jobject, IntPtr jmethodid);
    char CallCharMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    short CallShortMethod(IntPtr jobject, IntPtr jmethodid);
    short CallShortMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    int CallIntMethod(IntPtr jobject, IntPtr jmethodid);
    int CallIntMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    long CallLongMethod(IntPtr jobject, IntPtr jmethodid);
    long CallLongMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    float CallFloatMethod(IntPtr jobject, IntPtr jmethodid);
    float CallFloatMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    double CallDoubleMethod(IntPtr jobject, IntPtr jmethodid);
    double CallDoubleMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    void CallVoidMethod(IntPtr jobject, IntPtr jmethodid);
    void CallVoidMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue);
    IntPtr CallNonvirtualObjectMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    IntPtr CallNonvirtualObjectMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    bool CallNonvirtualBooleanMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    bool CallNonvirtualBooleanMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    byte CallNonvirtualByteMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    byte CallNonvirtualByteMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    char CallNonvirtualCharMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    char CallNonvirtualCharMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    short CallNonvirtualShortMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    short CallNonvirtualShortMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    int CallNonvirtualIntMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    int CallNonvirtualIntMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    long CallNonvirtualLongMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    long CallNonvirtualLongMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    float CallNonvirtualFloatMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    float CallNonvirtualFloatMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    double CallNonvirtualDoubleMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    double CallNonvirtualDoubleMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    void CallNonvirtualVoidMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid);
    void CallNonvirtualVoidMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    IntPtr GetFieldId(IntPtr jclass, string name, string signature);
    IntPtr GetObjectField(IntPtr jobject, IntPtr jfieldid);
    bool GetBooleanField(IntPtr jobject, IntPtr jfieldid);
    byte GetByteField(IntPtr jobject, IntPtr jfieldid);
    char GetCharField(IntPtr jobject, IntPtr jfieldid);
    short GetShortField(IntPtr jobject, IntPtr jfieldid);
    int GetIntField(IntPtr jobject, IntPtr jfieldid);
    long GetLongField(IntPtr jobject, IntPtr jfieldid);
    float GetFloatField(IntPtr jobject, IntPtr jfieldid);
    double GetDoubleField(IntPtr jobject, IntPtr jfieldid);
    void SetObjectField(IntPtr jobject, IntPtr jfieldid, IntPtr jobjectValue);
    void SetBooleanField(IntPtr jobject, IntPtr jfieldid, bool jboolean);
    void SetByteField(IntPtr jobject, IntPtr jfieldid, byte jbyte);
    void SetCharField(IntPtr jobject, IntPtr jfieldid, char jchar);
    void SetShortField(IntPtr jobject, IntPtr jfieldid, short jshort);
    void SetIntField(IntPtr jobject, IntPtr jfieldid, int value);
    void SetLongField(IntPtr jobject, IntPtr jfieldid, long jlong);
    void SetFloatField(IntPtr jobject, IntPtr jfieldid, float jfloat);
    void SetDoubleField(IntPtr jobject, IntPtr jfieldid, double jdouble);
    IntPtr GetStaticMethodId(IntPtr jclass, string name, string signature);
    IntPtr CallStaticObjectMethod(IntPtr jclass, IntPtr jmethodid);
    IntPtr CallStaticObjectMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    bool CallStaticBooleanMethod(IntPtr jclass, IntPtr jmethodid);
    bool CallStaticBooleanMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    byte CallStaticByteMethod(IntPtr jclass, IntPtr jmethodid);
    byte CallStaticByteMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    char CallStaticCharMethod(IntPtr jclass, IntPtr jmethodid);
    char CallStaticCharMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    short CallStaticShortMethod(IntPtr jclass, IntPtr jmethodid);
    short CallStaticShortMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    int CallStaticIntMethod(IntPtr jclass, IntPtr jmethodid);
    int CallStaticIntMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    long CallStaticLongMethod(IntPtr jclass, IntPtr jmethodid);
    long CallStaticLongMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    float CallStaticFloatMethod(IntPtr jclass, IntPtr jmethodid);
    float CallStaticFloatMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    double CallStaticDoubleMethod(IntPtr jclass, IntPtr jmethodid);
    double CallStaticDoubleMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    void CallStaticVoidMethod(IntPtr jclass, IntPtr jmethodid);
    void CallStaticVoidMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue);
    IntPtr GetStaticFieldId(IntPtr jclass, string name, string signature);
    IntPtr GetStaticObjectField(IntPtr jclass, IntPtr jfieldid);
    bool GetStaticBooleanField(IntPtr jclass, IntPtr jfieldid);
    byte GetStaticByteField(IntPtr jclass, IntPtr jfieldid);
    char GetStaticCharField(IntPtr jclass, IntPtr jfieldid);
    short GetStaticShortField(IntPtr jclass, IntPtr jfieldid);
    int GetStaticIntField(IntPtr jclass, IntPtr jfieldid);
    long GetStaticLongField(IntPtr jclass, IntPtr jfieldid);
    float GetStaticFloatField(IntPtr jclass, IntPtr jfieldid);
    double GetStaticDoubleField(IntPtr jclass, IntPtr jfieldid);
    void SetStaticObjectField(IntPtr jclass, IntPtr jfieldid, IntPtr jobject);
    void SetStaticBooleanField(IntPtr jclass, IntPtr jfieldid, bool jboolean);
    void SetStaticByteField(IntPtr jclass, IntPtr jfieldid, byte jbyte);
    void SetStaticCharField(IntPtr jclass, IntPtr jfieldid, char jchar);
    void SetStaticShortField(IntPtr jclass, IntPtr jfieldid, short jshort);
    void SetStaticIntField(IntPtr jclass, IntPtr jfieldid, int value);
    void SetStaticLongField(IntPtr jclass, IntPtr jfieldid, long jlong);
    void SetStaticFloatField(IntPtr jclass, IntPtr jfieldid, float jfloat);
    void SetStaticDoubleField(IntPtr jclass, IntPtr jfieldid, double jdouble);
    IntPtr NewString(char* jchar, int jsize);
    int GetStringLength(IntPtr jstring);
    char* GetStringChars(IntPtr jstring, bool* isCopy);
    void ReleaseStringChars(IntPtr jstring, char* jcharPtr);
    IntPtr NewStringUtf(byte* ptr);
    int GetStringUtfLength(IntPtr jstring);
    byte* GetStringUtfChars(IntPtr jstring, bool* isCopy);
    void ReleaseStringUtfChars(IntPtr jstring, byte* ptr);
    int GetArrayLength(IntPtr jarray);
    IntPtr NewObjectArray(int jsize, IntPtr jclass, IntPtr jobject);
    IntPtr GetObjectArrayElement(IntPtr jobjectarray, int jsize);
    void SetObjectArrayElement(IntPtr jobjectarray, int jsize, IntPtr jobject);
    IntPtr NewBooleanArray(int jsize);
    IntPtr NewByteArray(int jsize);
    IntPtr NewCharArray(int jsize);
    IntPtr NewShortArray(int jsize);
    IntPtr NewIntArray(int jsize);
    IntPtr NewLongArray(int jsize);
    IntPtr NewFloatArray(int jsize);
    IntPtr NewDoubleArray(int jsize);
    bool* GetBooleanArrayElements(IntPtr jbooleanarray, bool* isCopy);
    byte* GetByteArrayElements(IntPtr jbytearray, bool* isCopy);
    char* GetCharArrayElements(IntPtr jchararray, bool* isCopy);
    short* GetShortArrayElements(IntPtr jshortarray, bool* isCopy);
    int* GetIntArrayElements(IntPtr intarray, bool* isCopy);
    long* GetLongArrayElements(IntPtr jlongarray, bool* isCopy);
    float* GetFloatArrayElements(IntPtr jfloatarray, bool* isCopy);
    double* GetDoubleArrayElements(IntPtr jdoublearray, bool* isCopy);
    void ReleaseBooleanArrayElements(IntPtr jbooleanarray, bool* elements, int mode);
    void ReleaseByteArrayElements(IntPtr jbytearray, byte* elements, int mode);
    void ReleaseCharArrayElements(IntPtr jchararray, char* elements, int mode);
    void ReleaseShortArrayElements(IntPtr jshortarray, short* elements, int mode);
    void ReleaseIntArrayElements(IntPtr intarray, int* elements, int mode);
    void ReleaseLongArrayElements(IntPtr jlongarray, long* elements, int mode);
    void ReleaseFloatArrayElements(IntPtr jfloatarray, float* elements, int mode);
    void ReleaseDoubleArrayElements(IntPtr jdoublearray, double* elements, int mode);
    void GetBooleanArrayRegion(IntPtr jbooleanarray, int startIndex, int length, bool* buffer);
    void GetByteArrayRegion(IntPtr jbytearray, int startIndex, int length, byte* buffer);
    void GetCharArrayRegion(IntPtr jchararray, int startIndex, int length, char* buffer);
    void GetShortArrayRegion(IntPtr jshortarray, int startIndex, int length, short* buffer);
    void GetIntArrayRegion(IntPtr intarray, int startIndex, int length, int* buffer);
    void GetLongArrayRegion(IntPtr jlongarray, int startIndex, int length, long* buffer);
    void GetFloatArrayRegion(IntPtr jfloatarray, int startIndex, int length, float* buffer);
    void GetDoubleArrayRegion(IntPtr jdoublearray, int startIndex, int length, double* buffer);
    void SetBooleanArrayRegion(IntPtr jbooleanarray, int startIndex, int length, bool* buffer);
    void SetByteArrayRegion(IntPtr jbytearray, int startIndex, int length, byte* buffer);
    void SetCharArrayRegion(IntPtr jchararray, int startIndex, int length, char* buffer);
    void SetShortArrayRegion(IntPtr jshortarray, int startIndex, int length, short* buffer);
    void SetIntArrayRegion(IntPtr intarray, int startIndex, int length, int* buffer);
    void SetLongArrayRegion(IntPtr jlongarray, int startIndex, int length, long* buffer);
    void SetFloatArrayRegion(IntPtr jfloatarray, int startIndex, int length, float* buffer);
    void SetDoubleArrayRegion(IntPtr jdoublearray, int startIndex, int length, double* buffer);
    int RegisterNatives(IntPtr jclass, void* methods, int nMethods);
    int UnregisterNatives(IntPtr jclass);
    int MonitorEnter(IntPtr jobject);
    int MonitorExit(IntPtr jobject);
    int GetJavaVm(IntPtr javavm);
    void GetStringRegion(IntPtr jstring, int startIndex, int length, char* buffer);
    void GetStringUtfRegion(IntPtr jstring, int startIndex, int length, byte* buffer);
    void* GetPrimitiveArrayCritical(IntPtr jarray, bool* isCopy);
    void ReleasePrimitiveArrayCritical(IntPtr jarray, void* carray, int mode);
    char* GetStringCritical(IntPtr jstring, bool* isCopy);
    void ReleaseStringCritical(IntPtr jstring, char* carray);
    IntPtr NewWeakGlobalRef(IntPtr jobject);
    void DeleteWeakGlobalRef(IntPtr jweak);
    bool ExceptionCheck();
    IntPtr NewDirectByteBuffer(void* address, long capacity);
    void* GetDirectBufferAddress(IntPtr jobject);
    long GetDirectBufferCapacity(IntPtr jobject);
    int GetObjectRefType(IntPtr jobject);
    IntPtr GetModule(IntPtr jclass);
}