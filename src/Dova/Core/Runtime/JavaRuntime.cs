using Dova.Internals;
using Dova.Internals.Interop;
using Dova.Internals.Types.Primitives;

namespace Dova.Core.Runtime;

internal unsafe class JavaRuntime : IJavaRuntime
{
    private readonly JavaVM* _vm;
    private readonly JNIEnv* _env;
    private readonly JNINativeInterface* _func;

    public JavaRuntime(JavaVM* vm, JNIEnv* env)
    {
        _vm = vm;
        _env = env;
        _func = _env->functions;
    }

    public int GetVersion() => _func->GetVersion(_env);
    public IntPtr DefineClass(string name, IntPtr loader, byte* buf, int bufLen) => _func->DefineClass(_env, name, loader, (JByte*)buf, bufLen);
    public IntPtr FindClass(string name) => _func->FindClass(_env, name);
    public IntPtr FromReflectedMethod(IntPtr obj) => _func->FromReflectedMethod(_env, obj);
    public IntPtr FromReflectedField(IntPtr obj) => _func->FromReflectedField(_env, obj);
    public IntPtr ToReflectedMethod(IntPtr jClass, IntPtr jMethodId, bool isStatic) => _func->ToReflectedMethod(_env, jClass, jMethodId, isStatic);
    public IntPtr GetSuperclass(IntPtr clazz) => _func->GetSuperclass(_env, clazz);
    public bool IsAssignableFrom(IntPtr clazz1, IntPtr clazz2) => _func->IsAssignableFrom(_env, clazz1, clazz2);
    public IntPtr ToReflectedField(IntPtr jclass, IntPtr jfieldid, bool jboolean) => _func->ToReflectedField(_env, jclass, jfieldid, jboolean);
    public int Throw(IntPtr obj) => _func->Throw(_env, obj);
    public int ThrowNew(IntPtr clazz, string message) => _func->ThrowNew(_env, clazz, message);
    public IntPtr ExceptionOccurred() => _func->ExceptionOccurred(_env);
    public void ExceptionDescribe() => _func->ExceptionDescribe(_env);
    public void ExceptionClear() => _func->ExceptionClear(_env);
    public void FatalError(string msg) => _func->FatalError(_env, msg);
    public int PushLocalFrame(int capacity) => _func->PushLocalFrame(_env, capacity);
    public IntPtr PopLocalFrame(IntPtr jobject) => _func->PopLocalFrame(_env, jobject);
    public IntPtr NewGlobalRef(IntPtr obj) => _func->NewGlobalRef(_env, obj);
    public void DeleteGlobalRef(IntPtr globalRef) => _func->DeleteGlobalRef(_env, globalRef);
    public void DeleteLocalRef(IntPtr localRef) => _func->DeleteLocalRef(_env, localRef);
    public bool IsSameObject(IntPtr ref1, IntPtr ref2) => _func->IsSameObject(_env, ref1, ref2);
    public IntPtr NewLocalRef(IntPtr jobject) => _func->NewLocalRef(_env, jobject);
    public int EnsureLocalCapacity(int capacity) => _func->EnsureLocalCapacity(_env, capacity);
    public IntPtr AllocObject(IntPtr clazz) => _func->AllocObject(_env, clazz);
    public IntPtr NewObject(IntPtr clazz, IntPtr methodID) => _func->NewObject(_env, clazz, methodID);
    public IntPtr NewObjectA(IntPtr clazz, IntPtr methodId, params object[] jvalue) => _func->NewObjectA(_env, clazz, methodId, Converters.ToArray(jvalue));
    public IntPtr GetObjectClass(IntPtr obj) => _func->GetObjectClass(_env, obj);
    public bool IsInstanceOf(IntPtr obj, IntPtr clazz) => _func->IsInstanceOf(_env, obj, clazz);
    public IntPtr GetMethodId(IntPtr clazz, string name, string sig) => _func->GetMethodID(_env, clazz, name, sig);
    public IntPtr CallObjectMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallObjectMethod(_env, jobject, jmethodid);
    public IntPtr CallObjectMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallObjectMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public bool CallBooleanMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallBooleanMethod(_env, jobject, jmethodid);
    public bool CallBooleanMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallBooleanMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public byte CallByteMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallByteMethod(_env, jobject, jmethodid);
    public byte CallByteMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallByteMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public char CallCharMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallCharMethod(_env, jobject, jmethodid);
    public char CallCharMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallCharMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public short CallShortMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallShortMethod(_env, jobject, jmethodid);
    public short CallShortMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallShortMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public int CallIntMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallIntMethod(_env, jobject, jmethodid);
    public int CallIntMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallIntMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public long CallLongMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallLongMethod(_env, jobject, jmethodid);
    public long CallLongMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallLongMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public float CallFloatMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallFloatMethod(_env, jobject, jmethodid);
    public float CallFloatMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallFloatMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public double CallDoubleMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallDoubleMethod(_env, jobject, jmethodid);
    public double CallDoubleMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallDoubleMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public void CallVoidMethod(IntPtr jobject, IntPtr jmethodid) => _func->CallVoidMethod(_env, jobject, jmethodid);
    public void CallVoidMethodA(IntPtr jobject, IntPtr jmethodid, params object[] jvalue) => _func->CallVoidMethodA(_env, jobject, jmethodid, Converters.ToArray(jvalue));
    public IntPtr CallNonvirtualObjectMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualObjectMethod(_env, jobject, jclass, jmethodid);
    public IntPtr CallNonvirtualObjectMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualObjectMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public bool CallNonvirtualBooleanMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualBooleanMethod(_env, jobject, jclass, jmethodid);
    public bool CallNonvirtualBooleanMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualBooleanMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public byte CallNonvirtualByteMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualByteMethod(_env, jobject, jclass, jmethodid);
    public byte CallNonvirtualByteMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualByteMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public char CallNonvirtualCharMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualCharMethod(_env, jobject, jclass, jmethodid);
    public char CallNonvirtualCharMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualCharMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public short CallNonvirtualShortMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualShortMethod(_env, jobject, jclass, jmethodid);
    public short CallNonvirtualShortMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualShortMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public int CallNonvirtualIntMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualIntMethod(_env, jobject, jclass, jmethodid);
    public int CallNonvirtualIntMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualIntMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public long CallNonvirtualLongMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualLongMethod(_env, jobject, jclass, jmethodid);
    public long CallNonvirtualLongMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualLongMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public float CallNonvirtualFloatMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualFloatMethod(_env, jobject, jclass, jmethodid);
    public float CallNonvirtualFloatMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualFloatMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public double CallNonvirtualDoubleMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualDoubleMethod(_env, jobject, jclass, jmethodid);
    public double CallNonvirtualDoubleMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualDoubleMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public void CallNonvirtualVoidMethod(IntPtr jobject, IntPtr jclass, IntPtr jmethodid) => _func->CallNonvirtualVoidMethod(_env, jobject, jclass, jmethodid);
    public void CallNonvirtualVoidMethodA(IntPtr jobject, IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallNonvirtualVoidMethodA(_env, jobject, jclass, jmethodid, Converters.ToArray(jvalue));
    public IntPtr GetFieldId(IntPtr clazz, string name, string sig) => _func->GetFieldID(_env, clazz, name, sig);
    public IntPtr GetObjectField(IntPtr jobject, IntPtr jfieldid) => _func->GetObjectField(_env, jobject, jfieldid);
    public bool GetBooleanField(IntPtr jobject, IntPtr jfieldid) => _func->GetBooleanField(_env, jobject, jfieldid);
    public byte GetByteField(IntPtr jobject, IntPtr jfieldid) => _func->GetByteField(_env, jobject, jfieldid);
    public char GetCharField(IntPtr jobject, IntPtr jfieldid) => _func->GetCharField(_env, jobject, jfieldid);
    public short GetShortField(IntPtr jobject, IntPtr jfieldid) => _func->GetShortField(_env, jobject, jfieldid);
    public int GetIntField(IntPtr jobject, IntPtr jfieldid) => _func->GetIntField(_env, jobject, jfieldid);
    public long GetLongField(IntPtr jobject, IntPtr jfieldid) => _func->GetLongField(_env, jobject, jfieldid);
    public float GetFloatField(IntPtr jobject, IntPtr jfieldid) => _func->GetFloatField(_env, jobject, jfieldid);
    public double GetDoubleField(IntPtr jobject, IntPtr jfieldid) => _func->GetDoubleField(_env, jobject, jfieldid);
    public void SetObjectField(IntPtr jobject, IntPtr jfieldid, IntPtr jobjectValue) => _func->SetObjectField(_env, jobject, jfieldid, jobjectValue);
    public void SetBooleanField(IntPtr jobject, IntPtr jfieldid, bool jboolean) => _func->SetBooleanField(_env, jobject, jfieldid, jboolean);
    public void SetByteField(IntPtr jobject, IntPtr jfieldid, byte jbyte) => _func->SetByteField(_env, jobject, jfieldid, jbyte);
    public void SetCharField(IntPtr jobject, IntPtr jfieldid, char jchar) => _func->SetCharField(_env, jobject, jfieldid, jchar);
    public void SetShortField(IntPtr jobject, IntPtr jfieldid, short jshort) => _func->SetShortField(_env, jobject, jfieldid, jshort);
    public void SetIntField(IntPtr jobject, IntPtr jfieldid, int value) => _func->SetIntField(_env, jobject, jfieldid, value);
    public void SetLongField(IntPtr jobject, IntPtr jfieldid, long jlong) => _func->SetLongField(_env, jobject, jfieldid, jlong);
    public void SetFloatField(IntPtr jobject, IntPtr jfieldid, float jfloat) => _func->SetFloatField(_env, jobject, jfieldid, jfloat);
    public void SetDoubleField(IntPtr jobject, IntPtr jfieldid, double jdouble) => _func->SetDoubleField(_env, jobject, jfieldid, jdouble);
    public IntPtr GetStaticMethodId(IntPtr clazz, string name, string sig) => _func->GetStaticMethodID(_env, clazz, name, sig);
    public IntPtr CallStaticObjectMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticObjectMethod(_env, jclass, jmethodid);
    public IntPtr CallStaticObjectMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticObjectMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public bool CallStaticBooleanMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticBooleanMethod(_env, jclass, jmethodid);
    public bool CallStaticBooleanMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticBooleanMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public byte CallStaticByteMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticByteMethod(_env, jclass, jmethodid);
    public byte CallStaticByteMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticByteMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public char CallStaticCharMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticCharMethod(_env, jclass, jmethodid);
    public char CallStaticCharMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticCharMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public short CallStaticShortMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticShortMethod(_env, jclass, jmethodid);
    public short CallStaticShortMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticShortMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public int CallStaticIntMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticIntMethod(_env, jclass, jmethodid);
    public int CallStaticIntMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticIntMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public long CallStaticLongMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticLongMethod(_env, jclass, jmethodid);
    public long CallStaticLongMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticLongMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public float CallStaticFloatMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticFloatMethod(_env, jclass, jmethodid);
    public float CallStaticFloatMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticFloatMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public double CallStaticDoubleMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticDoubleMethod(_env, jclass, jmethodid);
    public double CallStaticDoubleMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticDoubleMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public void CallStaticVoidMethod(IntPtr jclass, IntPtr jmethodid) => _func->CallStaticVoidMethod(_env, jclass, jmethodid);
    public void CallStaticVoidMethodA(IntPtr jclass, IntPtr jmethodid, params object[] jvalue) => _func->CallStaticVoidMethodA(_env, jclass, jmethodid, Converters.ToArray(jvalue));
    public IntPtr GetStaticFieldId(IntPtr clazz, string name, string sig) => _func->GetStaticFieldID(_env, clazz, name, sig);
    public IntPtr GetStaticObjectField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticObjectField(_env, jclass, jfieldid);
    public bool GetStaticBooleanField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticBooleanField(_env, jclass, jfieldid);
    public byte GetStaticByteField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticByteField(_env, jclass, jfieldid);
    public char GetStaticCharField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticCharField(_env, jclass, jfieldid);
    public short GetStaticShortField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticShortField(_env, jclass, jfieldid);
    public int GetStaticIntField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticIntField(_env, jclass, jfieldid);
    public long GetStaticLongField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticLongField(_env, jclass, jfieldid);
    public float GetStaticFloatField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticFloatField(_env, jclass, jfieldid);
    public double GetStaticDoubleField(IntPtr jclass, IntPtr jfieldid) => _func->GetStaticDoubleField(_env, jclass, jfieldid);
    public void SetStaticObjectField(IntPtr jclass, IntPtr jfieldid, IntPtr jobject) => _func->SetStaticObjectField(_env, jclass, jfieldid, jobject);
    public void SetStaticBooleanField(IntPtr jclass, IntPtr jfieldid, bool jboolean) => _func->SetStaticBooleanField(_env, jclass, jfieldid, jboolean);
    public void SetStaticByteField(IntPtr jclass, IntPtr jfieldid, byte jbyte) => _func->SetStaticByteField(_env, jclass, jfieldid, jbyte);
    public void SetStaticCharField(IntPtr jclass, IntPtr jfieldid, char jchar) => _func->SetStaticCharField(_env, jclass, jfieldid, jchar);
    public void SetStaticShortField(IntPtr jclass, IntPtr jfieldid, short jshort) => _func->SetStaticShortField(_env, jclass, jfieldid, jshort);
    public void SetStaticIntField(IntPtr jclass, IntPtr jfieldid, int value) => _func->SetStaticIntField(_env, jclass, jfieldid, value);
    public void SetStaticLongField(IntPtr jclass, IntPtr jfieldid, long jlong) => _func->SetStaticLongField(_env, jclass, jfieldid, jlong);
    public void SetStaticFloatField(IntPtr jclass, IntPtr jfieldid, float jfloat) => _func->SetStaticFloatField(_env, jclass, jfieldid, jfloat);
    public void SetStaticDoubleField(IntPtr jclass, IntPtr jfieldid, double jdouble) => _func->SetStaticDoubleField(_env, jclass, jfieldid, jdouble);
    public IntPtr NewString(char* unicodeChars, int len) => _func->NewString(_env, (JChar*)unicodeChars, len);
    public int GetStringLength(IntPtr str) => _func->GetStringLength(_env, str);
    public char* GetStringChars(IntPtr str, bool* isCopy) => (char*)_func->GetStringChars(_env, str, (JBoolean*)isCopy);
    public void ReleaseStringChars(IntPtr str, char* chars) => _func->ReleaseStringChars(_env, str, (JChar*)chars);
    public IntPtr NewStringUtf(byte* bytes) => _func->NewStringUTF(_env, bytes);
    public int GetStringUtfLength(IntPtr str) => _func->GetStringUTFLength(_env, str);
    public byte* GetStringUtfChars(IntPtr str, bool* isCopy) => _func->GetStringUTFChars(_env, str, (JBoolean*)isCopy);
    public void ReleaseStringUtfChars(IntPtr str, byte* utf) => _func->ReleaseStringUTFChars(_env, str, utf);
    public int GetArrayLength(IntPtr array) => _func->GetArrayLength(_env, array);
    public IntPtr NewObjectArray(int length, IntPtr elementClass, IntPtr initialElement) => _func->NewObjectArray(_env, length, elementClass, initialElement);
    public IntPtr GetObjectArrayElement(IntPtr array, int index) => _func->GetObjectArrayElement(_env, array, index);
    public void SetObjectArrayElement(IntPtr array, int index, IntPtr value) => _func->SetObjectArrayElement(_env, array, index, value);
    public IntPtr NewBooleanArray(int jsize) => _func->NewBooleanArray(_env, jsize);
    public IntPtr NewByteArray(int jsize) => _func->NewByteArray(_env, jsize);
    public IntPtr NewCharArray(int jsize) => _func->NewCharArray(_env, jsize);
    public IntPtr NewShortArray(int jsize) => _func->NewShortArray(_env, jsize);
    public IntPtr NewIntArray(int jsize) => _func->NewIntArray(_env, jsize);
    public IntPtr NewLongArray(int jsize) => _func->NewLongArray(_env, jsize);
    public IntPtr NewFloatArray(int jsize) => _func->NewFloatArray(_env, jsize);
    public IntPtr NewDoubleArray(int jsize) => _func->NewDoubleArray(_env, jsize);
    public bool* GetBooleanArrayElements(IntPtr jbooleanarray, bool* isCopy) => (bool*)_func->GetBooleanArrayElements(_env, jbooleanarray, (JBoolean*)isCopy);
    public byte* GetByteArrayElements(IntPtr jbytearray, bool* isCopy) => (byte*)_func->GetByteArrayElements(_env, jbytearray, (JBoolean*)isCopy);
    public char* GetCharArrayElements(IntPtr jchararray, bool* isCopy) => (char*)_func->GetCharArrayElements(_env, jchararray, (JBoolean*)isCopy);
    public short* GetShortArrayElements(IntPtr jshortarray, bool* isCopy) => (short*)_func->GetShortArrayElements(_env, jshortarray, (JBoolean*)isCopy);
    public int* GetIntArrayElements(IntPtr intarray, bool* isCopy) => (int*)_func->GetIntArrayElements(_env, intarray, (JBoolean*)isCopy);
    public long* GetLongArrayElements(IntPtr jlongarray, bool* isCopy) => (long*)_func->GetLongArrayElements(_env, jlongarray, (JBoolean*)isCopy);
    public float* GetFloatArrayElements(IntPtr jfloatarray, bool* isCopy) => (float*)_func->GetFloatArrayElements(_env, jfloatarray, (JBoolean*)isCopy);
    public double* GetDoubleArrayElements(IntPtr jdoublearray, bool* isCopy) => (double*)_func->GetDoubleArrayElements(_env, jdoublearray, (JBoolean*)isCopy);
    public void ReleaseBooleanArrayElements(IntPtr jbooleanarray, bool* elements, int mode) => _func->ReleaseBooleanArrayElements(_env, jbooleanarray, (JBoolean*)elements, mode);
    public void ReleaseByteArrayElements(IntPtr jbytearray, byte* elements, int mode) => _func->ReleaseByteArrayElements(_env, jbytearray, (JByte*)elements, mode);
    public void ReleaseCharArrayElements(IntPtr jchararray, char* elements, int mode) => _func->ReleaseCharArrayElements(_env, jchararray, (JChar*)elements, mode);
    public void ReleaseShortArrayElements(IntPtr jshortarray, short* elements, int mode) => _func->ReleaseShortArrayElements(_env, jshortarray, (JShort*)elements, mode);
    public void ReleaseIntArrayElements(IntPtr intarray, int* elements, int mode) => _func->ReleaseIntArrayElements(_env, intarray, (JInt*)elements, mode);
    public void ReleaseLongArrayElements(IntPtr jlongarray, long* elements, int mode) => _func->ReleaseLongArrayElements(_env, jlongarray, (JLong*)elements, mode);
    public void ReleaseFloatArrayElements(IntPtr jfloatarray, float* elements, int mode) => _func->ReleaseFloatArrayElements(_env, jfloatarray, (JFloat*)elements, mode);
    public void ReleaseDoubleArrayElements(IntPtr jdoublearray, double* elements, int mode) => _func->ReleaseDoubleArrayElements(_env, jdoublearray, (JDouble*)elements, mode);
    public void GetBooleanArrayRegion(IntPtr jbooleanarray, int startIndex, int length, bool* buffer) => _func->GetBooleanArrayRegion(_env, jbooleanarray, startIndex, length, (JBoolean*)buffer);
    public void GetByteArrayRegion(IntPtr jbytearray, int startIndex, int length, byte* buffer) => _func->GetByteArrayRegion(_env, jbytearray, startIndex, length, (JByte*)buffer);
    public void GetCharArrayRegion(IntPtr jchararray, int startIndex, int length, char* buffer) => _func->GetCharArrayRegion(_env, jchararray, startIndex, length, (JChar*)buffer);
    public void GetShortArrayRegion(IntPtr jshortarray, int startIndex, int length, short* buffer) => _func->GetShortArrayRegion(_env, jshortarray, startIndex, length, (JShort*)buffer);
    public void GetIntArrayRegion(IntPtr intarray, int startIndex, int length, int* buffer) => _func->GetIntArrayRegion(_env, intarray, startIndex, length, (JInt*)buffer);
    public void GetLongArrayRegion(IntPtr jlongarray, int startIndex, int length, long* buffer) => _func->GetLongArrayRegion(_env, jlongarray, startIndex, length, (JLong*)buffer);
    public void GetFloatArrayRegion(IntPtr jfloatarray, int startIndex, int length, float* buffer) => _func->GetFloatArrayRegion(_env, jfloatarray, startIndex, length, (JFloat*)buffer);
    public void GetDoubleArrayRegion(IntPtr jdoublearray, int startIndex, int length, double* buffer) => _func->GetDoubleArrayRegion(_env, jdoublearray, startIndex, length, (JDouble*)buffer);
    public void SetBooleanArrayRegion(IntPtr jbooleanarray, int startIndex, int length, bool* buffer) => _func->SetBooleanArrayRegion(_env, jbooleanarray, startIndex, length, (JBoolean*)buffer);
    public void SetByteArrayRegion(IntPtr jbytearray, int startIndex, int length, byte* buffer) => _func->SetByteArrayRegion(_env, jbytearray, startIndex, length, (JByte*)buffer);
    public void SetCharArrayRegion(IntPtr jchararray, int startIndex, int length, char* buffer) => _func->SetCharArrayRegion(_env, jchararray, startIndex, length, (JChar*)buffer);
    public void SetShortArrayRegion(IntPtr jshortarray, int startIndex, int length, short* buffer) => _func->SetShortArrayRegion(_env, jshortarray, startIndex, length, (JShort*)buffer);
    public void SetIntArrayRegion(IntPtr intarray, int startIndex, int length, int* buffer) => _func->SetIntArrayRegion(_env, intarray, startIndex, length, (JInt*)buffer);
    public void SetLongArrayRegion(IntPtr jlongarray, int startIndex, int length, long* buffer) => _func->SetLongArrayRegion(_env, jlongarray, startIndex, length, (JLong*)buffer);
    public void SetFloatArrayRegion(IntPtr jfloatarray, int startIndex, int length, float* buffer) => _func->SetFloatArrayRegion(_env, jfloatarray, startIndex, length, (JFloat*)buffer);
    public void SetDoubleArrayRegion(IntPtr jdoublearray, int startIndex, int length, double* buffer) => _func->SetDoubleArrayRegion(_env, jdoublearray, startIndex, length, (JDouble*)buffer);
    public int RegisterNatives(IntPtr clazz, void* methods, int nMethods) => _func->RegisterNatives(_env, clazz, methods, nMethods);
    public int UnregisterNatives(IntPtr clazz) => _func->UnregisterNatives(_env, clazz);
    public int MonitorEnter(IntPtr obj) => _func->MonitorEnter(_env, obj);
    public int MonitorExit(IntPtr obj) => _func->MonitorExit(_env, obj);
    public int GetJavaVm(IntPtr vm) => _func->GetJavaVM(_env, (JavaVM**)vm);
    public void GetStringRegion(IntPtr jstring, int startIndex, int length, char* buffer) => _func->GetStringRegion(_env, jstring, startIndex, length, (JChar*)buffer);
    public void GetStringUtfRegion(IntPtr jstring, int startIndex, int length, byte* buffer) => _func->GetStringUTFRegion(_env, jstring, startIndex, length, buffer);
    public void* GetPrimitiveArrayCritical(IntPtr jarray, bool* isCopy) => _func->GetPrimitiveArrayCritical(_env, jarray, (JBoolean*)isCopy);
    public void ReleasePrimitiveArrayCritical(IntPtr jarray, void* carray, int mode) => _func->ReleasePrimitiveArrayCritical(_env, jarray, carray, mode);
    public char* GetStringCritical(IntPtr jstring, bool* isCopy) => (char*)_func->GetStringCritical(_env, jstring, (JBoolean*)isCopy);
    public void ReleaseStringCritical(IntPtr jstring, char* carray) => _func->ReleaseStringCritical(_env, jstring, (JChar*)carray);
    public IntPtr NewWeakGlobalRef(IntPtr jobject) => _func->NewWeakGlobalRef(_env, jobject);
    public void DeleteWeakGlobalRef(IntPtr jweak) => _func->DeleteWeakGlobalRef(_env, jweak);
    public bool ExceptionCheck() => _func->ExceptionCheck(_env);
    public IntPtr NewDirectByteBuffer(void* address, long capacity) => _func->NewDirectByteBuffer(_env, address, capacity);
    public void* GetDirectBufferAddress(IntPtr buf) => _func->GetDirectBufferAddress(_env, buf);
    public long GetDirectBufferCapacity(IntPtr buf) => _func->GetDirectBufferCapacity(_env, buf);
    public int GetObjectRefType(IntPtr obj) => (int)_func->GetObjectRefType(_env, obj);
    public IntPtr GetModule(IntPtr jclass) => _func->GetModule(_env, jclass);
}